// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crawler.proto

package crawler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeatherRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherRequest) Reset()         { *m = WeatherRequest{} }
func (m *WeatherRequest) String() string { return proto.CompactTextString(m) }
func (*WeatherRequest) ProtoMessage()    {}
func (*WeatherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c7eabcfe7807d1, []int{0}
}

func (m *WeatherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherRequest.Unmarshal(m, b)
}
func (m *WeatherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherRequest.Marshal(b, m, deterministic)
}
func (m *WeatherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherRequest.Merge(m, src)
}
func (m *WeatherRequest) XXX_Size() int {
	return xxx_messageInfo_WeatherRequest.Size(m)
}
func (m *WeatherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherRequest proto.InternalMessageInfo

func (m *WeatherRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type WeatherReply struct {
	Info                 []*WeatherReply_Info `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WeatherReply) Reset()         { *m = WeatherReply{} }
func (m *WeatherReply) String() string { return proto.CompactTextString(m) }
func (*WeatherReply) ProtoMessage()    {}
func (*WeatherReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c7eabcfe7807d1, []int{1}
}

func (m *WeatherReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherReply.Unmarshal(m, b)
}
func (m *WeatherReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherReply.Marshal(b, m, deterministic)
}
func (m *WeatherReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherReply.Merge(m, src)
}
func (m *WeatherReply) XXX_Size() int {
	return xxx_messageInfo_WeatherReply.Size(m)
}
func (m *WeatherReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherReply.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherReply proto.InternalMessageInfo

func (m *WeatherReply) GetInfo() []*WeatherReply_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type WeatherReply_Info struct {
	Date                 string   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Weather              string   `protobuf:"bytes,2,opt,name=weather,proto3" json:"weather,omitempty"`
	Temperature          string   `protobuf:"bytes,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherReply_Info) Reset()         { *m = WeatherReply_Info{} }
func (m *WeatherReply_Info) String() string { return proto.CompactTextString(m) }
func (*WeatherReply_Info) ProtoMessage()    {}
func (*WeatherReply_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c7eabcfe7807d1, []int{1, 0}
}

func (m *WeatherReply_Info) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherReply_Info.Unmarshal(m, b)
}
func (m *WeatherReply_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherReply_Info.Marshal(b, m, deterministic)
}
func (m *WeatherReply_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherReply_Info.Merge(m, src)
}
func (m *WeatherReply_Info) XXX_Size() int {
	return xxx_messageInfo_WeatherReply_Info.Size(m)
}
func (m *WeatherReply_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherReply_Info.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherReply_Info proto.InternalMessageInfo

func (m *WeatherReply_Info) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *WeatherReply_Info) GetWeather() string {
	if m != nil {
		return m.Weather
	}
	return ""
}

func (m *WeatherReply_Info) GetTemperature() string {
	if m != nil {
		return m.Temperature
	}
	return ""
}

func init() {
	proto.RegisterType((*WeatherRequest)(nil), "crawler.WeatherRequest")
	proto.RegisterType((*WeatherReply)(nil), "crawler.WeatherReply")
	proto.RegisterType((*WeatherReply_Info)(nil), "crawler.WeatherReply.Info")
}

func init() { proto.RegisterFile("crawler.proto", fileDescriptor_84c7eabcfe7807d1) }

var fileDescriptor_84c7eabcfe7807d1 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2e, 0x4a, 0x2c,
	0xcf, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb8,
	0xf8, 0xc2, 0x53, 0x13, 0x4b, 0x32, 0x52, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x04, 0xb8, 0x98, 0x4b, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0xa5,
	0x69, 0x8c, 0x5c, 0x3c, 0x70, 0x45, 0x05, 0x39, 0x95, 0x42, 0x7a, 0x5c, 0x2c, 0x99, 0x79, 0x69,
	0xf9, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x52, 0x7a, 0x30, 0xb3, 0x91, 0x15, 0xe9, 0x79,
	0xe6, 0xa5, 0xe5, 0x07, 0x81, 0xd5, 0x49, 0x85, 0x71, 0xb1, 0x80, 0x78, 0x42, 0x42, 0x5c, 0x2c,
	0x29, 0x89, 0x25, 0xa9, 0x50, 0xb3, 0xc1, 0x6c, 0x21, 0x09, 0x2e, 0xf6, 0x72, 0x88, 0x36, 0x09,
	0x26, 0xb0, 0x30, 0x8c, 0x2b, 0xa4, 0xc0, 0xc5, 0x5d, 0x92, 0x9a, 0x5b, 0x90, 0x5a, 0x94, 0x58,
	0x52, 0x5a, 0x94, 0x2a, 0xc1, 0x0c, 0x96, 0x45, 0x16, 0x32, 0x0a, 0xe0, 0xe2, 0x73, 0x86, 0x58,
	0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x64, 0xc7, 0xc5, 0xe5, 0x9e, 0x5a, 0x02, 0x75,
	0x87, 0x90, 0x38, 0xa6, 0xcb, 0xc0, 0x7e, 0x94, 0x12, 0xc5, 0xea, 0x64, 0x25, 0x86, 0x24, 0x36,
	0x70, 0xf0, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x53, 0xd9, 0xf2, 0x8b, 0x2f, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CrawlerServiceClient is the client API for CrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrawlerServiceClient interface {
	GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error)
}

type crawlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerServiceClient(cc *grpc.ClientConn) CrawlerServiceClient {
	return &crawlerServiceClient{cc}
}

func (c *crawlerServiceClient) GetWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherReply, error) {
	out := new(WeatherReply)
	err := c.cc.Invoke(ctx, "/crawler.CrawlerService/GetWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerServiceServer is the server API for CrawlerService service.
type CrawlerServiceServer interface {
	GetWeather(context.Context, *WeatherRequest) (*WeatherReply, error)
}

func RegisterCrawlerServiceServer(s *grpc.Server, srv CrawlerServiceServer) {
	s.RegisterService(&_CrawlerService_serviceDesc, srv)
}

func _CrawlerService_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServiceServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.CrawlerService/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServiceServer).GetWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.CrawlerService",
	HandlerType: (*CrawlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _CrawlerService_GetWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawler.proto",
}
